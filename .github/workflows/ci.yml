name: CI Django

on:
  push:
    branches: [ kubernetes, github-actions, main]
  pull_request:
    branches: [ kubernetes, github-actions, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DJANGO_SETTINGS_MODULE: demo.settings
      DATABASE_NAME: db.sqlite3
      DJANGO_PORT: 8765
      PYTHONUNBUFFERED: 1
      
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run migrations
        run: python manage.py migrate

      - name: Run unit tests
        run: |
          pip install coverage
          coverage run manage.py test
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 .

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
     
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/demo-devops-python:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/demo-devops-python:${{ github.sha }}

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/demo-devops-python:latest
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library
  deploy:
    needs: docker
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update gcloud and install components
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk=455.0.0-0 google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: chatbot-laguna-370814
          version: '455.0.0'

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials dev-cluster \
            --region us-central1 \
            --project chatbot-laguna-370814

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/Remote/